---
layout: default
title: Semaphore Documentation
---

"Semaphore":https://semaphoreapp.com is a hosted continuous integration service for Ruby applications.

We're designing it to be very easy to use, but if you have any questions, we hope this site will give you an answer. You can find the *FAQ* below and browse available articles in the sidebar.

h3. F.A.Q.

h3. Is it possible to override build commands on some branches?

Yes. Since the environment variable @BRANCH_NAME@ is "available":/available-environment-variables, you can add a new build command to your project settings such as:

<pre>
if [ "$BRANCH_NAME" = "acceptance-tests" ]; then bundle exec rake spec:acceptance ; fi
</pre>

h3. How can I export some environment variables or insert my configuration file?

Simply add @export VAR=foo@ or @cp config/.env.sample config/.env@ to your build commands (in project settings).

h3. How do I configure the database?

You shouldn't normally need to do that, as Semaphore automatically inserts a working @database.yml@ in your project, based on the database selected in your project's settings. On top of that, we insert <code>rake db:setup</code> and <code>rake db:test:prepare</code> build commands, which is enough in most cases.

If you have or need to write a custom build script, you can use the database name and password specified by exported "environment variables":/available-environment-variables.

h3. Can I use Postgres, MongoDB and Redis on one project?

Yes. Select Postgres as your database in project settings; that will make sure that Semaphore injects a working @database.yml@ file.

For Mongo, you'll need to add build command such as:

<pre>
cp config/mongoid.yml.example config/mongoid.yml</pre>

Default MongoDB configuration file that you use in development will work, no credentials are required.

Redis is running on default port and by default works without any configuration.

h3. How do I build a project with private gems?

Either use a hosted private gem repository such as "Gemfury":http://www.gemfury.com, or follow this procedure:

1) Generate a new passwordless SSH key pair:

<pre>ssh-keygen -f /tmp/key -t dsa</pre>

2) Put the content of <code>/tmp/key</code> into a private gist on GitHub and name the file <code>id_dsa</code>.

3) Put the content of <code>/tmp/key.pub</code> as a new deploy key in your "gem's admin screen on GitHub":http://d.pr/i/qFcv.

4) Go to your app's project settings on Semaphore and add the following build commands before all:

<pre>mkdir -p ~/.ssh
cd ~/.ssh
wget https://raw.github.com/gist/.../id_dsa (this is the path you get through the "raw" link on gist's page)
chmod 600 id_dsa
cd -
</pre>

We're considering to hide this behind a nice UI.

h3. My project depends on X and you don't seem to have it

Important packages that are available in the platform are listed in the "Version Information":/version-information article.

Additional dependencies can be added by simply adding an installation command to your build settings:

<pre>
sudo apt-get install -y libawesome-dev
</pre>

If you need help, just <a href="mailto:semaphore@renderedtext.com">email us</a> with your needs. If not, we'd still love to hear from you - knowing that many people are using a particular dependency generally encourages us to add it to platform.

h3. How can I execute Postgres commands?

Add a build command which looks something like:

<pre>psql -c "anything" -d $DATABASE_NAME_TEST -P pager</pre>

h3. Build fails with "Unknown database 'xyz_test'"

That message usually means that rake db:* tasks have set up the @_development@ database and not the @_test@ one which is required by the tests.

Try adding @RAILS_ENV=test@ to your build commands.

h3. "fatal: Could not parse object" during bundle install

If bundle install output looks like this:

<pre>
Fetching gem metadata from http://rubygems.org/.......
Fetching gem metadata from http://rubygems.org/..
Updating git://github.com/some/gem.git
fatal: Could not parse object 'a84dd3407eaf064064cca9650c354cb163384467'.
Git error: command `git reset --hard a84dd3407eaf064064cca9650c354cb163384467` in directory /home/runner/somehash/vendor/bundle/ruby/1.9.1/bundler/gems/gem-a84dd3407eaf has failed.
If this error persists you could try removing the cache directory '/home/runner/somehash/vendor/bundle/ruby/1.9.1/cache/bundler/git/gem-cbe2ee16ed53098079007f06cd77ed0890d0d752'
</pre>

This problem occurs when there have been changes like force-pushes to a git repo which is referenced in a Gemfile.

The solution is is to comment that gem line in Gemfile, run bundle, uncomment it and bundle again. Then the Gemfile.lock will reference a valid git revision.

h3. "file not found: db:create (ArgumentError)"

Upgrade shoulda gem, or add <code>:require => false</code> to it in Gemfile, or add test-unit gem to your Gemfile. More info "here":http://stackoverflow.com/a/9571551 and "here":http://stackoverflow.com/questions/7957330/ruby-1-9-3-breaks-rake-test.

h3. My tests / integration specs / scenarios fail on Semaphore but pass locally

Headless, clean CI environment may make some tests more vulnerable:

* Double-check if your local development environment has some configuration which was introduced manually and is not available after a fresh repository checkout.
* Check if all your testing gems and configuration are up to date.
* @sleep()@ is a common source of "flaky tests":http://www.eurostarconferences.com/blog/2012/10/17/test-leaders-live-webinar-qa-with-simon-stewart.
* Having your tests depend on a certain order of records will probably not work.
* Tests depending on external web services will likely fail at some point - when that service blocks repeated access or becomes unavailable; use "VCR":https://github.com/myronmarston/vcr to record responses once and play them back every next time
* Avoid mixing mocks with real records.
* If using Timecop, remember to reset any changes to time.
* Check if your specs are relying on specific domain configuration in <code>/etc/hosts</code>. We can add special configuration for you but in general your tests shouldn't rely on such deep system configuration changes.
* Change the database_cleaner strategy to truncation for specs with :js => true.
* Make sure that your code is not prone to race conditions.

h3. Selenium tests are unable to obtain connection to Firefox

Make sure selenium-webdriver gem is at latest available version specified on "rubygems.org":https://rubygems.org. Use <code>bundle update selenium-webdriver capybara</code>, commit and push the resulting changes to Gemfile.lock.

h3. I'm having issues with capybara-webkit

1. Check how your configuration compares to our "test app":https://github.com/renderedtext/testapp-capybara-webkit/tree/steak, which is known to pass. The <code>spec_helper.rb</code>, for example, should have minimal configuration necessary.

2. Do not run <code>xvfb</code> - Semaphore does that before each build.

3. You can dump the content of the page to file with "save_page":http://rubydoc.info/github/jnicklas/capybara/master/Capybara/Session#save_page-instance_method.

That method would just save content of the page to file and return path to file. After that you can just print content of the file to the stdout and insect it in the build logs. Once you see the content of the page that you are testing I should be much easier to understand what's going on.

4. Make sure your views don't have scripts such as Google Analytics running in test environment - they will cause timeouts.

We've found Selenium and Firefox to be more stable and predictable than Webkit.

h3. My build fails if I have pending Cucumber scenarios

This is by design - Cucumber returns with an error code if you have pending scenarios.

If you'd like to avoid this, tag the work-in-progress scenarios and exclude them from your build via <code>--tags ~tag-to-exclude</code>.

h3. My build takes longer than an hour

Semaphore automatically halts the build if a command takes longer than an hour - in most cases so far it has been a sign of something going wrong, like a debugger statement left in source code.

But if your build really takes longer than an hour, you can you try running the specs or scenarios in two or more commands, eg:

<pre>
bundle exec cucumber features/shopping_cart/*
bundle exec cucumber features/reporting/*
bundle exec cucumber features/something_else/*
</pre>

You can then leverage Semaphore's "build parallelization feature":http://renderedtext.com/blog/2012/10/25/semaphore-can-now-parallelize-your-builds/ and run these simultaneously.

h3. My Sphinx tests fail

If you are using Thinking Sphinx, make sure that that you run this command before your tests:

<pre>
RAILS_ENV=test bundle exec rake ts:index
</pre>

Than you can either run

<pre>
RAILS_ENV=test bundle exec rake ts:start &
</pre>

or use

<pre>
ThinkingSphinx::Test.start
ThinkingSphinx::Test.stop
</pre>

directly in the source code of your tests.

h3. I'm having problems with git submodules

Due to current internal mechanism of repository and bundle caching, Semaphore is known for not working well with projects that contain git submodules.

If you have not found an answer here, please email us at <a href="mailto:semaphore@renderedtext.com">semaphore@renderedtext.com</a>.
